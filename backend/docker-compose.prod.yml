version: '3.8'

services:
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
    restart: always
    depends_on:
      - user-service
      - post-service
      - media-service
      - social-service
      - message-service
      - notification-service
      - story-service
      - search-service

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/user_service
    restart: always
    depends_on:
      - postgres
      - redis

  post-service:
    build:
      context: ./services/post-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/post_service
    restart: always
    depends_on:
      - postgres
      - redis

  media-service:
    build:
      context: ./services/media-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/media_service
    restart: always
    depends_on:
      - postgres
      - redis

  social-service:
    build:
      context: ./services/social-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/social_service
    restart: always
    depends_on:
      - postgres
      - redis

  message-service:
    build:
      context: ./services/message-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/message_service
    restart: always
    depends_on:
      - postgres
      - redis

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/notification_service
    restart: always
    depends_on:
      - postgres
      - redis

  story-service:
    build:
      context: ./services/story-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/story_service
    restart: always
    depends_on:
      - postgres
      - redis

  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
    restart: always
    depends_on:
      - elasticsearch
      - redis

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:6
    volumes:
      - redis_data:/data
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: always

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    restart: always

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data: